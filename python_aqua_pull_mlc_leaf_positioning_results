#! /usr/bin/python
import requests
import json
import time
from fake_useragent import UserAgent
from timeit import default_timer as timer
from random_user_agent.user_agent import UserAgent
from random_user_agent.params import SoftwareName, OperatingSystem
from selenium.webdriver.chrome.options import Options
from selenium import webdriver
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.action_chains import ActionChains
from selenium.common.exceptions import NoSuchElementException
from selenium.common.exceptions import StaleElementReferenceException
from selenium.webdriver.support import expected_conditions

import webbrowser

import sys
import gc
# change directory
import os.path
import glob
#import python libraries
import numpy
from pandas import *
# Import the plotting library 
import matplotlib.pyplot as plt 
from matplotlib.backends.backend_pdf import PdfPages
import openpyxl
from openpyxl import load_workbook
from openpyxl.utils.dataframe import dataframe_to_rows

#download data for today's date automatically
from datetime import datetime, timedelta
from datetime import date

# clear all variables
from IPython import get_ipython 

# Idea:
# - what to run xml code in aqua which handles python code.

start_time = time.time()
start = timer()

cnt = 100 # list of stock symbols per page
offset = 10000 # changes yahoo page
length_of_offset_string=[] 
previous_length_of_offset_string=1 # yahoo page page zero has a default offset of zero -> len(str(0))=1. therefore 'previous_length_of_offset_string' is 1 for 'BASE_URL'
flag = 1
temp  = 10
name_to_symbol = []
total = 0 # total number of stock symbols downloaded
counter=0
ua = UserAgent()

start_year=2021 
start_month=10 
start_day=12 

# dateframe 2
dataframe_structure_days_months=['1','2','3','4','5','6','7','8','9','10',
                          '11','12','13','14','15','16','17','18','19','20',
                          '21','22','23','24','25','26','27','28','29','30',
                          '31'] # to create dataframe-> these are indexes to look at

# all tests available in Aqua Review Tab
# test numbers and reference test instances names should align, if not then test may have been re-uploaded to aqua and therefore received a new number
# test_numbers_review_aqua=['20664','464','465','385','468','469','513','481','470','20663','20670',
#                   '20617','20618','20679','540',
#                   '532','541','542','538','20581','20611','460','461','462','20623',
#                   '521','522','523','524','525','526','564','556','10576','563','20613',
#                   '20584','20609','537','535','459','20662','20579','20580','551','20682','20681','20680',
#                    '562','539','543','473','20676','496','384','486','454','20653','383','485',
#                   '20678','20669','20677','20665','477','545','478','479']
#test_numbers_review_aqua=['20664','464','465','385']
# for testing purposes 
# test_numbers_review_aqua=['10576','513','481','470','531','20594','540',
#                   '532','541','542','538','20581','20611','460','461','462','561']

reference_test_instances_names=['MLC Leaf and Jaw Position LinacConnect']
# which is in alignment of 'test_numbers_review_aqua'

#reference_test_instance_tabindex_values=['6','16','32','48','63(add all machine)','79','89'(21machines),'102']

# all machine names in NSW aqua server2
reference_machine_names_review_aqua=['NSW_Kingswood_Redgum','NSW_Concord_Centaur','NSW_Hurstville_Banksia','NSW_Hurstville_Jacaranda','NSW_MUH_Jupiter',
                                    'NSW_Newcastle_Lakeside','NSW_Newcastle_Oceanview','NSW_Maitland_Riverside',
                                    'NSW_StVincents_Buzz','NSW_StVincents_Jessie']


#create zeros
array_of_zeros_reference_machine_names=numpy.zeros((len(reference_machine_names_review_aqua))) # first is row and second is column # create array of zeroes which is same length of new data array


#save file directory
filename_xlsx=('C:/Users/Public/python_work/aqua_pull_MLC_leaf_position_detection_results.xlsx') # .xlsx or .csv depending on which function I am using
filename_sharepoint=('C:/Users/felix.bockelmann/GenesisCare/NSW Physics - Physics Automation Scripts/MLC_leaf_position_detection_results/MLC_leaf_position_detection_results.csv') # .xlsx or .csv depending on which function I am using


#execptions
ignored_exceptions=(NoSuchElementException,StaleElementReferenceException,)

#### create csv folder to save dataframe in here
csv_path, csv_file_ending = os.path.split(filename_xlsx)
csv_file, csv_ending = csv_file_ending.split('.')
csv_extension=csv_file+'.'+csv_ending
joined_path_csv_dataframe=os.path.join(csv_path,csv_extension)

# running time 66mins
###Get Pass/Fail/Warning of all tests to create a dashboard at TEAMS ###
#find URL
#url = "http://gcpraqua02.genesiscare.com.au:8080/AQA/"
url="http://gcpraqua02.genesiscare.com.au:8080/AQA/#app:reportTabs:reviewTest" # link goes to test instance. select machine and run test
#url="http://gcpraqua02.genesiscare.com.au:8080/AQA/#adminTabs:testTabs:invis:testInstanceEdit&complete=true&name=MLC%20Leaf%20and%20Jaw%20Position%20-%20NSW_Kingswood_Redgum%20(6%20MV)&testInstanceId=64&scheduled=true&scheduledStr=&completeStr=&referrer=tests"

#add options to Chrome webpage in clinical mode, when run in test mode just commment '--headless' mode
options = webdriver.ChromeOptions() # code executes without prompting a window part 1 1 of 3
#options.add_argument('--headless') # code executes without prompting a window part 2 2 of 3 ####in test mode -> it promts a window -> displays what code is doing
options.add_argument("--window-size=1440,810")# 1920,1080
options.add_experimental_option("excludeSwitches", ["enable-automation"])
options.add_experimental_option('useAutomationExtension', False)
driver = webdriver.Chrome(options=options) # code executes without prompting a window part 3 3 of 3

driver.get(url) # open aqua in url
elem = WebDriverWait(driver, 20).until(EC.visibility_of_all_elements_located((By.CSS_SELECTOR, "input[placeholder='ACCOUNT NAME']"))) # positive: it waits until input is ready, negative: output comes as a list. Haven't found a way to convert a list to <class 'selenium.webdriver.remote.webelement.WebElement'>. therefore i need to add another line here
elem = driver.find_element(By.CSS_SELECTOR,"input[placeholder='ACCOUNT NAME']")# it has found username
elem.send_keys("ADMIN") # add username
elem1 = WebDriverWait(driver, 20).until(EC.visibility_of_all_elements_located((By.CSS_SELECTOR, "input[type='password']")))
elem1 = driver.find_element(By.CSS_SELECTOR,"input[type='password']")# it has found password!!
elem1.send_keys("gadmin") # add password
login_button = WebDriverWait(driver, 20).until(EC.visibility_of_all_elements_located((By.CSS_SELECTOR, "button")))
login_button = driver.find_element(By.CSS_SELECTOR,"button") # it has found the log in button
login_button.click() # it has clicked the log in button and opened aqua
time.sleep(10) # time to let chrome open aqua before continuing with code
### login is successful, from here have full access to AQUA ###
### get passing result from 'review tab'###
# there is no need to re-login when url is changed, when already logged into aqua

#counter_dataframe_loc=0
counter_save_data_to_excel=0
get_name_test_review_aqua_to_dataframe=[]
get_name_test_review_aqua=[]
counter_machine_name=2 # the button to get the machine names for each test instance at test review in aqua starts with 7 and increases by 10 each time a new test is clicked on and increases by 5 everytime a new machine is clicked on  
dataframe_aqua_dashboard=[]
get_machine_name_of_test_review_aqua_pre=[]
#find test instance (1st for-loop), then machine name (2nd for-loop) and lastly continue to pull data
for i in reference_test_instances_names:
    # use test names to find test names which is the primary option
    initial_machine_name_click_button=("//option[text()='Intercom MRL']")
    first_part, second_part = initial_machine_name_click_button.split('=')
    third_part=second_part.split(']')
    option_value_test_instances=first_part+'='+"'"+i+"'"+']'
    #print(option_value_test_instances)
    try:
        click_select_test_instance_button_run = WebDriverWait(driver, 20).until(EC.element_to_be_clickable((By.XPATH, option_value_test_instances))) # if test instance is not available, then continue with next variable in for-loop.
    except :
        continue
    get_name_test_review_aqua = i # it has found the log in button -> find test
    
    # # use test numbers to find test name. it is a backup in case the test name cannot be used to find test instances. if test numbers is used, test numbers need to be updated on weekly basis because everytime a test is reuploaded and receives a NEW test number.
    # reference_option_value_test_instance=("option[value='454']")
    # first_part, second_part = reference_option_value_test_instance.split('=')
    # third_part=second_part.split(']')
    # option_value_test_instances=first_part+'='+"'"+i+"'"+']'
    # try:
    #     click_select_test_button_run = WebDriverWait(driver, 20).until(EC.element_to_be_clickable((By.CSS_SELECTOR, option_value_test_instances))) # if test instance is not available, then continue with next variable in for-loop.
    # except :
    #     continue
    # get_name_test_review_aqua = driver.find_element(By.CSS_SELECTOR,option_value_test_instances).text # it has found the log in button -> find test
    
    # print(get_name_test_review_aqua)
    click_select_test_instance_button_run.click()
    time.sleep(1)# otherwise it might not go into second loop. I could try 1 second instead of 2
    
    # get machine name and compare to reference list
    #counter_machine_name=counter_machine_name+5
    #print('counter_machine_name',counter_machine_name)
    
    # getting machine names of this particualr test instance
    get_machine_name_of_test_review_aqua_pre_pre = WebDriverWait(driver,5,ignored_exceptions=ignored_exceptions)\
                        .until(expected_conditions.presence_of_element_located((By.CSS_SELECTOR, "select[tabindex]")))
    get_machine_name_of_test_review_aqua_pre_pre = driver.find_elements(By.CSS_SELECTOR,"select[tabindex]")
    get_machine_name_of_test_review_aqua_pre_pre=get_machine_name_of_test_review_aqua_pre_pre[1].text
    get_machine_name_of_test_review_aqua_pre=get_machine_name_of_test_review_aqua_pre_pre.split('\n') # all machine names are put into a list

    
#     reference_option_value_test_instance_machine_name=("select[tabindex='7']")
#     first_part, second_part = reference_option_value_test_instance_machine_name.split('=')
#     third_part=second_part.split(']')
#     option_value_test_instances=first_part+'='+"'"+str(counter_machine_name)+"'"+']' # get machine name
#     print(option_value_test_instances)
#     get_machine_name_of_test_review_aqua_pre = driver.find_element_by_css_selector(option_value_test_instances).text # next one is 12
#     get_machine_name_of_test_review_aqua_pre=get_machine_name_of_test_review_aqua_pre.split('\n') # to be able to separate strings and convert them into a list
    get_machine_name_of_test_review_aqua_pre.pop(0) # remove first item of list-> it is "Select" and no need to include that into loop 
    #print(len(get_machine_name_of_test_review_aqua_pre))
    if len(get_machine_name_of_test_review_aqua_pre) == 0:#if size of list is not empty, then...
        continue # there is no machine name to pick here and no reason to continue with code
    # find machine name and follow-up with pulling data
    
    for ii in range(len(get_machine_name_of_test_review_aqua_pre)):
    #a=[0]
    #for ii in range(len(a)): # it is for testing purposes
        #counter_machine_name=counter_machine_name+5
        #print('counter_machine_name',counter_machine_name)
        
        first_part_testname,get_machine_name_of_test_review_aqua=get_machine_name_of_test_review_aqua_pre[ii].split(' - ')# (' - ') it is space+dash+space to be able to testnamae and get machine name only
        reference_option_value_test_instance_machine_name_click_button=("//option[text()='Intercom MRL - Unity SVC']")
        first_part, second_part = reference_option_value_test_instance_machine_name_click_button.split('=')
        third_part=second_part.split(']')
        option_value_test_instances=first_part+'='+"'"+get_machine_name_of_test_review_aqua_pre[ii]+"'"+']'
        click_select_machinename_button_run = driver.find_element(By.XPATH,option_value_test_instances)
        click_select_machinename_button_run.click()
        
        # select date range
        time.sleep(1)
        select_dateinput = WebDriverWait(driver,5,ignored_exceptions=ignored_exceptions)\
                        .until(expected_conditions.presence_of_element_located((By.CSS_SELECTOR, "input[type='text']")))
        select_dateinput = driver.find_elements(By.CSS_SELECTOR,"input[type='text']") # it has found the log in button ->[5] is date1 at test results, [6] is date2 at test results
        select_dateinput1=select_dateinput[5]
        select_dateinput1.click()  # Focus input field
        # todays date
        #today= int(datetime.today().strftime('%d'))-1# i only need the day and minus one to determine the index position of the list which equals to today's day # todays date#today= datetime.today().strftime('%d/%m/%Y') # todays date
        #today= int(datetime(start_year, start_month, start_day).strftime('%d'))-1 #determine manual entry of start date # for test purposes # minus one to determine the index position of the list which equals to today's day 
        #select_dateinput1.send_keys(today) # add first date                    
        click_confirm_date = driver.find_elements(By.CSS_SELECTOR,"div[class='gwt-Label']") # find date input field
        click_confirm_date[0].click() # [0] -> clicks on first day of the month # list contains all dates -> i could get a specific date! for this case it is the first one which is 1st
        time.sleep(1) # time to let chrome open aqua before continuing with code
        select_dateinput2=select_dateinput[6]
        select_dateinput2.click()                      # Focus input field
        time.sleep(1) # time to let chrome open aqua before continuing with code
        click_confirm_date = driver.find_elements(By.CSS_SELECTOR,"div[class='gwt-Label']") # find date input field
        click_confirm_date[-1].click() # [-1] -> click the last date of the calendar of the month which is 30th or 31st
        all_buttons = driver.find_elements(By.CSS_SELECTOR,"button") # it has found the log in button
        click_searchtestresults_button_run=all_buttons[17] # opens Tests (upper left button)#[4] opens scheduling, [5] opens equipment, [6] opens compliance, [7] system data, [8] To-Do List, [9] dashboard, [10] status, [11] library, [12] events, [13] review, [14] report, [15] plot data, [16] Test Results, [17] Test results "Search" button
        click_searchtestresults_button_run.click() # click on "review" 
        time.sleep(5) # time to let chrome open aqua before continuing with code
        # select date range complete
        
        
        get_testresult_datetime = driver.find_elements(By.CSS_SELECTOR,"div[class='gwt-HTML']") # get test results from most recent test during the day which is the last test in the list (when test was running multiple times during the day)
        length_get_testresult_datetime=len(get_testresult_datetime)# length of list
        get_testresult_datetime = driver.find_elements(By.CSS_SELECTOR,"div[class='gwt-HTML']") # get test results from most recent test during the day which is the last test in the list (when test was running multiple times during the day)
        length_get_testresult_datetime=len(get_testresult_datetime)# length of list
        print(length_get_testresult_datetime)
        if length_get_testresult_datetime != 0:#if size of list is not empty, then...
            index_range_date=numpy.arange(1,length_get_testresult_datetime,5) # always divide total number by 5, such as 15 items means 3 test runs have been run on that day. in this case i need index 2,7,12 to get date and time
            print(index_range_date)
            counter=0
            for x in index_range_date:
                output_testresult_date=get_testresult_datetime[x].text
                output_testresult_date.click() # click on "review" 
        
        
        print('time to sleep')
        time.sleep(100)
#         #find test with latest time which determines the most recent test run on that day
#         dublicate_dates=[]
#         output_testresult_passfailwarning_total=[]
#         output_testresult_date_total=[]
#         output_testresult_passfailwarning_total_pre1=[]
#         output_testresult_passfailwarning_dublicates_pre2=[]
#         output_testresult_passfailwarning_dublicates_date_pre1=[]
#         output_testresult_passfailwarning_dublicates_pre2=[]
#         output_testresult_passfailwarning_dublicates_pre=[]
#         output_testresult_date_total_in_days=[]
# #         get_testresult_datetime = WebDriverWait(driver,10,ignored_exceptions=ignored_exceptions)\
# #                         .until(expected_conditions.presence_of_elements_located((By.CSS_SELECTOR, "div[class='gwt-HTML']")))
#         get_testresult_datetime = driver.find_elements(By.CSS_SELECTOR,"div[class='gwt-HTML']") # get test results from most recent test during the day which is the last test in the list (when test was running multiple times during the day)
#         length_get_testresult_datetime=len(get_testresult_datetime)# length of list
#         if length_get_testresult_datetime != 0:#if size of list is not empty, then...
#             index_range_date=numpy.arange(1,length_get_testresult_datetime,5) # always divide total number by 5, such as 15 items means 3 test runs have been run on that day. in this case i need index 2,7,12 to get date and time
#             #index_range_datetime=numpy.arange(2,length_get_testresult_datetime,5) # always divide total number by 5, such as 15 items means 3 test runs have been run on that day. in this case i need index 2,7,12 to get date and time
#             counter=0
#             for x in index_range_date:
#                 output_testresult_date=get_testresult_datetime[x].text
#                 counter=counter+1
#                 if (counter == 1):
#                     output_testresult_date_total=output_testresult_date
#                 else:
#                     output_testresult_date_total=numpy.append(output_testresult_date_total,output_testresult_date)
#             if counter==1:
#                 output_testresult_date_total_list=output_testresult_date_total.split(',')
#             else:
#                 output_testresult_date_total_list=output_testresult_date_total.tolist()
#             dublicate_dates=list(set([xx for xx in output_testresult_date_total_list if output_testresult_date_total_list.count(xx) > 1])) # which dates are dublicates
#             if len(dublicate_dates) == 0:#if size of list is not empty, then...
#                 get_testresult_passfailwarning_pre = driver.find_elements(By.CSS_SELECTOR,"div[class='aqua-formComment']") # get test results from most recent test during the day which is the last test in the list (when test was running multiple times during the day)
#                 length_get_testresult_passfailwarning_pre=len(get_testresult_passfailwarning_pre)
#                 counter=0
#                 for x in range(length_get_testresult_passfailwarning_pre):
#                     output_testresult_passfailwarning = driver.find_elements(By.CSS_SELECTOR,"div[class='aqua-formComment']")[x].text
#                     if (counter == 1):
#                         output_testresult_passfailwarning_total=output_testresult_passfailwarning
#                     else:
#                         output_testresult_passfailwarning_total=numpy.append(output_testresult_passfailwarning_total,output_testresult_passfailwarning)
#             else:
#                 # get pass/fail/warning from non dublicates first -> aim is to get one result per day (multple results within a day will be assessed here)
#                 index_range_output_testresult_date_total=numpy.arange(0,len(output_testresult_date_total),1) 
#                 identify_index_of_dublicates = numpy.where(pandas.DataFrame(output_testresult_date_total).duplicated(keep=False))
#                 deleted_duplicates_output_testresult_date_total=numpy.delete(index_range_output_testresult_date_total,identify_index_of_dublicates)
#                 get_testresult_passfailwarning_pre = driver.find_elements(By.CSS_SELECTOR,"div[class='aqua-formComment']") # get test results from most recent test during the day which is the last test in the list (when test was running multiple times during the day)
#                 length_get_testresult_passfailwarning_pre=len(get_testresult_passfailwarning_pre)
#                 counter=0
#                 for x in deleted_duplicates_output_testresult_date_total:
#                     output_testresult_passfailwarning = driver.find_elements(By.CSS_SELECTOR,"div[class='aqua-formComment']")[x].text
#                     counter=counter+1
#                     if (counter == 1):
#                         output_testresult_passfailwarning_total_pre1=output_testresult_passfailwarning
#                     else:
#                         output_testresult_passfailwarning_total_pre1=numpy.append(output_testresult_passfailwarning_total_pre1,output_testresult_passfailwarning)
#                 # get pass/fail/warning from dublicates and add them at the end of pass/fail/warning array
#                 counter1=0
#                 counter2=0
#                 for y in dublicate_dates:
#                     identify_index_of_dublicates_forloop=numpy.array(numpy.where(output_testresult_date_total==y)).flatten()
#                     counter1=counter1+1
#                     no_pass_in_dublicate_dates=0 # 0 means dublicate array contains no pass, only fail and warning
#                     for yy in identify_index_of_dublicates_forloop:
#                         output_testresult_passfailwarning_dublicates = driver.find_elements(By.CSS_SELECTOR,"div[class='aqua-formComment']")[yy].text
#                         counter2=counter2+1
#                         if (counter2 == 1):
#                             output_testresult_passfailwarning_dublicates_pre=output_testresult_passfailwarning_dublicates
#                         else:
#                             output_testresult_passfailwarning_dublicates_pre=numpy.append(output_testresult_passfailwarning_dublicates_pre,output_testresult_passfailwarning_dublicates)
#                         # if one test out of the dublicates on that day passes then break for loop
#                         if output_testresult_passfailwarning_dublicates == 'PASS':
#                             no_pass_in_dublicate_dates=1 # 1 means there is a pass
#                             index_range_date_pass=index_range_date[yy]
#                             output_testresult_passfailwarning_dublicates_date=get_testresult_datetime[index_range_date_pass].text
#                             output_testresult_passfailwarning_dublicates_pre=output_testresult_passfailwarning_dublicates
#                             break
#                     # if none of the dublicates on that day have a 'pass' condition, then find out which one is the most recent test and save this result whether it is fail or warning
#                     if no_pass_in_dublicate_dates == 0:
#                         index_range_datetime=numpy.arange(2,length_get_testresult_datetime,5) # always divide total number by 5, such as 15 items means 3 test runs have been run on that day. in this case i need index 2,7,12 to get date and time
#                         index_range_datetime_for_dublicates=index_range_datetime[identify_index_of_dublicates_forloop] 
#                         counter3=0
#                         for yyy in index_range_datetime_for_dublicates:
#                             output_testresult_datetime_dublicates=get_testresult_datetime[yyy].text
#                             counter3=counter3+1
#                             if (counter3 == 1):
#                                 output_testresult_datetime_dublicates_total=output_testresult_datetime_dublicates
#                             else:
#                                 output_testresult_datetime_dublicates_total=numpy.append(output_testresult_datetime_dublicates_total,output_testresult_datetime_dublicates)
#                         max_output_testresult_datetime_dublicates_total=max(output_testresult_datetime_dublicates_total, key=lambda xx: datetime.strptime(xx, "%d/%m/%Y %H:%M"))
#                         identify_row_most_recent_test_run=numpy.array(numpy.where(output_testresult_datetime_dublicates_total==max_output_testresult_datetime_dublicates_total)).flatten() # find index of most recent test run
#                         identify_index_most_recent_test_run_of_current_dublicates=numpy.uint16(identify_row_most_recent_test_run).item() # converts array from numpy.ndarray to integer
#                         #get_testresult_failwarning_most_recent_test_run_of_current_dublicates = driver.find_elements_by_css_selector("div[class='aqua-formComment']")[identify_row_most_recent_test_run].text # get test results from most recent test during the day which is the last test in the list (when test was running multiple times during the day)
#                         #print(get_testresult_failwarning_most_recent_test_run_of_current_dublicates)
#                         variable_for_index_range_date=identify_index_of_dublicates_forloop[0]+identify_row_most_recent_test_run # equals to variable yy in above for-loop
#                         index_range_date_pass=index_range_date[variable_for_index_range_date]
#                         index_range_date_pass=numpy.uint16(index_range_date_pass).item() # converts array from numpy.ndarray to integer
#                         output_testresult_passfailwarning_dublicates_date=get_testresult_datetime[index_range_date_pass].text
#                         output_testresult_passfailwarning_dublicates_pre=output_testresult_passfailwarning_dublicates_pre[identify_index_most_recent_test_run_of_current_dublicates]     
#                     if (counter1 == 1):
#                         output_testresult_passfailwarning_dublicates_date_pre1=output_testresult_passfailwarning_dublicates_date
#                         output_testresult_passfailwarning_dublicates_pre2=output_testresult_passfailwarning_dublicates_pre
#                     else:
#                         output_testresult_passfailwarning_dublicates_date_pre1=numpy.append(output_testresult_passfailwarning_dublicates_date_pre1,output_testresult_passfailwarning_dublicates_date)
#                         output_testresult_passfailwarning_dublicates_pre2=numpy.append(output_testresult_passfailwarning_dublicates_pre2,output_testresult_passfailwarning_dublicates_pre)        
#                 output_testresult_date_total_adjusted=output_testresult_date_total[deleted_duplicates_output_testresult_date_total]
#                 output_testresult_date_total=numpy.append(output_testresult_date_total_adjusted,output_testresult_passfailwarning_dublicates_date_pre1)
#                 output_testresult_passfailwarning_total=numpy.append(output_testresult_passfailwarning_total_pre1,output_testresult_passfailwarning_dublicates_pre2)


        #create NAN array
        number_rows_for_array=len(get_name_test_review_aqua.split(',')) # get number of elements in list, but string needs to be converted to list first before len() can be determined
        nan_array = numpy.empty((number_rows_for_array,31,)) # ((row,columns))
        nan_array[:] = numpy.nan    

        #create dataframe and save data to csv.file
        #total_dataframe = DataFrame(index = dataframe_structure_days_months)  

        #index_range_rows=numpy.arange(0,number_rows_for_array,1) # creates a range of number according to lenght of tests analysed in aqua
        index_range_columns=numpy.arange(0,31,1) # creates a range of number according to lenght of days in a month

        #get_name_test_review_aqua_pre=get_name_test_review_aqua.split(',') # convert string array to list
        get_name_test_review_aqua_to_dataframe=get_name_test_review_aqua.split(',') # convert string array to list
        #get_name_test_review_aqua_to_dataframe.extend(get_name_test_review_aqua_pre)
        
        #check if 'output_testresult_date_total' contains one value (then it is a string) or multiple values (then it is an numpy ndarray)
        if isinstance(output_testresult_date_total, str): # is variable a string?
            output_testresult_date_total=output_testresult_date_total.split(',') # convert from numpy ndarray to list
        else:
            output_testresult_date_total=list(output_testresult_date_total) # convert from numpy ndarray to list
        counter=0
        # enter test results into dataframe
        for x in output_testresult_date_total: # need to get days from date. The date array is a numpy array and that's why it seems the for-loop method is most reliable solution so far.
            counter=counter+1
            converted_date_to_numpydateformat=datetime.strptime(x,'%d/%m/%Y').strftime('%Y-%m-%d')
            output_testresult_date_total_in_days_pre=numpy.array(pandas.to_datetime(converted_date_to_numpydateformat).day) # convert numpy array of dates into pandas and then get days only and then convert to list
            if (counter == 1):
                output_testresult_date_total_in_days=output_testresult_date_total_in_days_pre
            else:
                output_testresult_date_total_in_days=numpy.append(output_testresult_date_total_in_days,output_testresult_date_total_in_days_pre)
        output_testresult_passfailwarning_total=numpy.array(output_testresult_passfailwarning_total)
        dataframe_aqua_dashboard = DataFrame(data=nan_array) # setup dataframe and index equals to name of tests
        #print(output_testresult_date_total_in_days,output_testresult_passfailwarning_total)
        if len(output_testresult_date_total) != 0: # enter test results into dataframe, if no test results available then leave nan in row
            #dataframe_aqua_dashboard.loc[counter_dataframe_loc,output_testresult_date_total_in_days-1]=output_testresult_passfailwarning_total # add real data in here
            dataframe_aqua_dashboard.loc[0,output_testresult_date_total_in_days-1]=output_testresult_passfailwarning_total # add real data in here
        # counter_dataframe_loc=counter_dataframe_loc+1
        # prepare to save dataframe into file
        dataframe_aqua_dashboard.columns=dataframe_structure_days_months # setup name of columns
        dataframe_aqua_dashboard.index=get_name_test_review_aqua_to_dataframe
        #pandas.set_option('display.max_rows', 500) # to be able to display the dataframe as a whole
        #pandas.set_option('display.max_columns', 500) # to be able to display the dataframe as a whole
        #pandas.set_option('display.width', 1000) # to be able to display the dataframe as a whole
        #print(get_name_test_review_aqua_to_dataframe)
        #save df's into tabs of excel spreadsheet
        # save only when machine name is part of reference list
        try: # sometimes machine names come as 'name'+(6MV), those stuff needs to be removed
            get_machine_name_of_test_review_aqua_final,get_machine_name_of_test_review_aqua1=get_machine_name_of_test_review_aqua.split(' (')  
        except ValueError:
            get_machine_name_of_test_review_aqua_final=get_machine_name_of_test_review_aqua
        get_machine_name_of_test_review_aqua_final=get_machine_name_of_test_review_aqua_final.split(',')
        machinename_save_dataframe_data_into_spreadsheet=list(set(reference_machine_names_review_aqua) & set(get_machine_name_of_test_review_aqua_final)) # set finds a match of two lists # find names which are in the list, if so continue saving and if not don't save
        # if "machinename_save_dataframe_data_into_spreadsheet" is empty, then continue. it means machine name is not part of reference list. 'Else' would be that machine name is part of the reference list  
        #print(machinename_save_dataframe_data_into_spreadsheet)
        if len(machinename_save_dataframe_data_into_spreadsheet) == 0:
            dataframe_aqua_dashboard=[]
            continue
        else:
            index_machine_name_in_reference_list=list(numpy.array(numpy.where(numpy.array(reference_machine_names_review_aqua)==numpy.array(machinename_save_dataframe_data_into_spreadsheet))).flatten())
            #add to numbers to list
            current_value_at_index=array_of_zeros_reference_machine_names[index_machine_name_in_reference_list]
            current_value_at_index=current_value_at_index+1
            array_of_zeros_reference_machine_names[index_machine_name_in_reference_list]=current_value_at_index
            #setup sheet_name
            current_value_at_index_save_to_sreadsheet=array_of_zeros_reference_machine_names[index_machine_name_in_reference_list]
            counter_save_data_to_excel=counter_save_data_to_excel+1
            if counter_save_data_to_excel==1:
                #create file name # I have deleted
                #year= int(datetime.today().strftime('%Y')) # today's year
                #month= int(datetime.today().strftime('%m'))# today's month
                #csv_path, csv_file_ending = os.path.split(joined_path_csv_dataframe)
                #csv_file, csv_ending = csv_file_ending.split('.')
                #csv_extension=csv_file+'.'+csv_ending
                #joined_path_csv_dataframe_final=os.path.join(csv_path,csv_extension)
                # open and save dataframe to excel spreadsheet
                writer = pandas.ExcelWriter(joined_path_csv_dataframe, engine='openpyxl') # engine='openpyxl' #  xlsxwriter
                dataframe_aqua_dashboard.to_excel(writer, sheet_name=machinename_save_dataframe_data_into_spreadsheet[0]) # tab 1
                writer.save()
            else:
                if current_value_at_index_save_to_sreadsheet==1:
                    with ExcelWriter(joined_path_csv_dataframe, mode='a') as writer:
                        dataframe_aqua_dashboard.to_excel(writer, sheet_name=machinename_save_dataframe_data_into_spreadsheet[0])
                else:
                    workbook = openpyxl.load_workbook(joined_path_csv_dataframe)  # load workbook if already exists
                    sheet = workbook[machinename_save_dataframe_data_into_spreadsheet[0]]  # declare the active sheet 
                    # append the dataframe results to the current excel file
                    for row in dataframe_to_rows(dataframe_aqua_dashboard, header = False): #(dataframe_aqua_dashboard, header = False, index = False)
                        sheet.append(row)
                    workbook.save(joined_path_csv_dataframe)  # save workbook
                    workbook.close()  # close workbook
            dataframe_aqua_dashboard=[]

# open aqua_dashboard.xlsx file and separate all tabs into an individual .xlsx file and save them in sharepoint
workbook = openpyxl.load_workbook(joined_path_csv_dataframe)  # load workbook if already exists
all_current_sheet_names=workbook.sheetnames
length_of_sheets_in_workboook=len(all_current_sheet_names)
for ii in range(len(all_current_sheet_names)):
    actual_sheet_name=all_current_sheet_names[ii]
    #sheet = workbook[actual_sheet_name]  # declare the active sheet 
    xls = pandas.ExcelFile(joined_path_csv_dataframe)
    dataframe_aqua_dashboard_each_sheet = pandas.read_excel(xls, actual_sheet_name)
    #create file name
    year= int(datetime.today().strftime('%Y')) # today's year
    month= int(datetime.today().strftime('%m'))# today's month
    csv_path, csv_file_ending = os.path.split(filename_sharepoint)
    csv_file, csv_ending = csv_file_ending.split('.')
    csv_extension=csv_file+'_'+str(month)+'_'+str(year)+'_'+str(actual_sheet_name)+'.'+csv_ending
    joined_path_csv_dataframe_final=os.path.join(csv_path,csv_extension)
    # open and save dataframe to excel spreadsheet
    #dataframe_aqua_dashboard_each_sheet = DataFrame(data=sheet) # setup dataframe and index equals to name of tests
    #writer = pandas.ExcelWriter(joined_path_csv_dataframe_final, engine='openpyxl') # engine='openpyxl' #  xlsxwriter
    #dataframe_aqua_dashboard_each_sheet.to_excel(writer, sheet_name=actual_sheet_name) # tab 1
    #writer.save()
    dataframe_aqua_dashboard_each_sheet.to_csv(joined_path_csv_dataframe_final, sep=',',encoding='utf-8',header='true')
    dataframe_aqua_dashboard_each_sheet=[]
    
# save as append
#td_transpose.to_csv(joined_path_csv_dataframe, sep=',',encoding='utf-8',header='true')
#td_transpose.to_csv(joined_path_csv_dataframe, mode='a', header=False) # it does append to existing csv.file

#read_csv_rawdata_get_first_date_pre = pandas.read_csv(joined_path_csv_data) # read data from csv.file
#read_csv_rawdata_get_first_date_pre_alldates =numpy.array(read_csv_rawdata_get_first_date_pre.columns)[one:] # get index of csv.file which are dates
#read_csv_rawdata_get_first_date_pre_most_recent=read_csv_rawdata_get_first_date_pre_alldates[zero]   # all but the first element -> first element is not a date. it is an unnecessary string named 'Unnamed: 0'


#replace zeroes with nan
#full_range_of_variables_dataframe_data_close_pre[full_range_of_variables_dataframe_data_close_pre==zero] = numpy.nan# replace all zeros with NAN
# total_dataframe[x]=all_time_result# complete dataframe 

# td_transpose=total_dataframe.transpose()
# td_transpose=td_transpose.iloc[1: , :]
# td_transpose.to_csv(joined_path_csv_dataframe, mode='a', header=False) # it does append to existing csv.file

#read_csv_rawdata_dataframe.loc[row_idx_stock_name,dates_of_columns_of_read_csv_rawdata_dataframe]=full_range_of_variables_dataframe_data_close_pre

# save df's into tabs of excel spreadsheet
#option1
# writer = pandas.ExcelWriter(joined_path_csv_dataframe, engine='openpyxl') # engine='openpyxl' #  xlsxwriter
# dataframe_aqua_dashboard.to_excel(writer, sheet_name='hallo') # tab 1
# writer.save()
# dataframe_aqua_dashboard.to_excel(writer, sheet_name='hallo2') # tab 1
# writer.save()
#option2
# a=['0','1']
# counter=0
# for x in a:
#         counter=counter+1
#         if counter==1:
#             writer = pandas.ExcelWriter(joined_path_csv_dataframe, engine='openpyxl') # engine='openpyxl' #  xlsxwriter
#             dataframe_aqua_dashboard.to_excel(writer, sheet_name='set1') # tab 1
#             writer.save()
#         else:
#             with ExcelWriter(joined_path_csv_dataframe, mode='a') as writer:
#                 dataframe_aqua_dashboard.to_excel(writer, sheet_name='set2')
        
## get the verison of chrome driver
#from win32com.client import Dispatch
#def get_version_via_com(filename):
#    parser = Dispatch("Scripting.FileSystemObject")
#    try:
#        version = parser.GetFileVersion(filename)
#    except Exception:
#        return None
#    return version
#if __name__ == "__main__":
#    paths = [r"C:\Program Files\Google\Chrome\Application\chrome.exe",
#             r"C:\Program Files (x86)\Google\Chrome\Application\chrome.exe"]
#    version = list(filter(None, [get_version_via_com(p) for p in paths]))[0]
#    print(version)
    
    
    

#driver.quit()
# timer ends
print("--- %s seconds ---" % (time.time() - start_time))
print("python code is finished")

# clear all variables
get_ipython().magic('reset -sf')
